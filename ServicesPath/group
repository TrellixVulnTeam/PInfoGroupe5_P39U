
GET: /group

Renvoie "You reached group"


POST: /group/create

crée un nouveau groupe.
inputJSON: {"groupName": nomDuGroupe, "admin": le nom du createur du groupe, "invitation": invite}
invite = la chaine de caractère qui permet de rejoindre un groupe.
output: retourne un json { "reussit":boolean, "message":message si erreur }

GET: /group/{groupName}

renvoie les infos de "groupName" sous la forme json suivante:
{ "groupName" : nom du groupe,"admin" : admin, "invitation": invite, users: [}

GET: /group/{invitation}
renvoie le groupe qui a cette invitation


DELETE: /group/{groupeName}/{admin}

efface le groupe. Il faut être admin.
output: retourne un json { "reussit":boolean, "message":message si erreur }


GET: /group/{groupName}/users

renvoie une liste d'utilisateur sous la forme json suivante:
 [liste de noms utilisateur]


GET: /group/all/users

renvoie une liste des groupes avec leur utilisateurs
{ nomGroupe1 : [utilisateurs], nomGroupe2 : [utilisateur], etc }


POST: /group/users

ajoute un utilisateur au groupe s'il connait l'invitation. Pas besoin de connaître le groupe. Seulement utilisateur.
inputJSON: { "userName": nomUtilisateur, "invitation":invite}
outputJSON: retourne un json { "reussit":boolean, "message":message si erreur }


DELETE: /group/{groupName}/{userName}/{admin}

efface l'utilisateur du groupe. Il faut être admin ou bien l'utilisateur même.
outputJSON: retourne un json { "reussit":boolean, "message":message si erreur }


GET : /group/{username}/groups
retourne la liste des groupes d'un utilisateur
outputJSON: [liste de groupe]

POST: /group/{groupName}/newCatalogue

constitue un nouveau catalogue pour le groupe et le retourne.
inputJSON: {"type" : "random" / vide, "admin":admin}
outputJSON: retourne un json { "reussit":boolean, "message":message si erreur }

Si type : random, constitue un catalogue au hasard.
Sinon, prend les 5 films avec le meilleur score et les utilisent pour créer un nouveau catalogue.


GET: /group/{groupName}/{userName}/Catalogue

renvoie le catalogue de film en cours. Renvoie les ids.
renvoie JSON {"catalogue" : [int], "message":message si erreur }
si erreur, renvoie tableau vide

DELETE: /group/{groupName}/{admin}/Catalogue

efface le catalogue courant
renvoie JSON {"reussit":boolean, "message":message si erreur }


GET: /group/{groupName}/scores

return les scores de chaque film. format <Integer,Integer>
output: [{"filmID":id, "score":score},etc...]

POST: /group/{groupName}/scores

modifie les scores.
input: {"userName": nom utilisateur,"idFilm" : id, "increment" : boolean}
increment: True = +1, False = -1.
output:renvoie JSON {"reussit":boolean, "message":message si erreur }
Pas de problème de conccurence.

GET: /group/{groupName}/votes

retourne les votes des utilisateurs du groupe sous la forme
{ utilisateur : {idfilm1 : +1, idfilm2: -1}}

